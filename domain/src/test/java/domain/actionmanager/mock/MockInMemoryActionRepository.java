package domain.actionmanager.mock;

import domain.actionmanager.api.entity.Action;
import domain.actionmanager.api.entity.OperationType;
import domain.actionmanager.spi.ActionRepository;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

public class MockInMemoryActionRepository implements ActionRepository {

    private final Map<String, Action> actionsInMemory = new HashMap<>();

    public Optional<Action> findByName(String actionName) {
        return actionsInMemory.values().stream()
                .filter(action -> hasActionName(action, actionName))
                .findFirst();
    }

    private boolean hasActionName(Action action, String actionName) {
        return actionName.equals(action.getName());
    }

    @Override
    public Optional<Action> findById(String actionId) {
        return actionsInMemory.values().stream()
                .filter(mockAction -> mockAction.getId().equals(actionId))
                .findFirst();
    }

    @Override
    public List<Action> findActionsByUserId(String ownerId) {
        return actionsInMemory.values()
                .stream()
                .filter(action -> isOwnedByUser(action, ownerId))
                .collect(Collectors.toList());
    }

    private boolean isOwnedByUser(Action action, String ownerId) {
        return action.getOwner().equals(ownerId);
    }

    @Override
    public Optional<Action> addAction(String actionName, OperationType type, String ownerId) {
        Action actionToAdd = new MockAction(this.autoGeneratedId(), actionName, type, ownerId);
        actionsInMemory.put(actionToAdd.getId(), actionToAdd);
        return Optional.ofNullable(actionToAdd);
    }

    @Override
    public void deleteAction(String actionId) {
        actionsInMemory.remove(actionId);
    }

    private String autoGeneratedId() {
        return String.valueOf(actionsInMemory.size());
    }
}
